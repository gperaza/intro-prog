#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+TITLE: Class notes: C

* Hello world

Scratch equivalent:
[[file:figs/when_green_flag.png]]

#+BEGIN_SRC C
#include <stdio.h>

int main(void)
{
    printf("hello, world\n");
}
#+END_SRC

Let's start by decomposing the elements of the function call:
#+BEGIN_SRC C
printf("hello, world\n");
#+END_SRC

* Variables
To create a variable in C (equal means assignment):
#+BEGIN_SRC C
int counter = 0;
#+END_SRC

Scratch equivalent:
[[file:figs/set_counter_to_0.png]]

To increment a number by 1:
#+BEGIN_SRC C
counter = counter + 1;  //note that counter must exist for this to work

/* Alternative 1 */
counter += 1;

/* Alernative 2 */
counter++;
#+END_SRC

Scratch equivalent:
[[file:figs/change_counter_by_1.png]]

* Conditionals
A simple ~if~ conditional:
#+BEGIN_SRC C
if (x < y)
{
    printf("x is less than y\n");
}
#+END_SRC

Scratch equivalent:
[[file:figs/if_x_y.png]]

An ~if-else~ conditional (indentation is just a matter of style):
#+BEGIN_SRC C
if (x < y)
{
    printf("x is less than y\n");
}
else
{
    printf("x is not less than y\n");
}
#+END_SRC

Scratch equivalent:
[[file:figs/if_else.png]]

An ~else-if~:
#+BEGIN_SRC C
if (x < y)
{
    printf("x is less than y\n");
}
else if (x > y)
{
    printf("x is greater than y\n");
}
else if (x == y)
{
    printf("x is equal to y\n");
}
#+END_SRC

Scratch equivalent:
[[file:figs/if_else_if.png]]

** Comparison operators in C
- ==: equal to
- !=: not equal to
- >: greater than
- <: less than
- >=: greater or equal to
- <=: less or equal to


* Loops
Infinite loops:
#+BEGIN_SRC C
while (true)
{
    printf("hello, world\n");
}
#+END_SRC

Scratch alternative: [[file:figs/forever.png]]

For loops:
#+BEGIN_SRC C
for (int i = 0; i < 50; i++)
{
    printf("hello, world\n");
}
#+END_SRC

Scratch alternative: [[file:figs/repeat.png]]

* Asking for input

#+BEGIN_SRC C
string answer = get_string("What's your name?\n");
/* Note: string is not an actual data type, it is defined in cs50.h to ease the
   introduction to c. (as well as the get_string function) */

printf("hello, %s\n", answer);
#+END_SRC

Scratch alternative: [[file:figs/ask_say_join.png]]

* hello.c

We will now create our first program, create a new directory and type the
following in simple text file named ~hello.c~:
#+BEGIN_SRC C
#include <stdio.h>

int main(void)
{
    printf("hello, world\n");
}
#+END_SRC

* Compiling
To actually run the program, you must compile it to transform it to machine
language (binary). In Linux, run the following:
#+BEGIN_SRC sh
gcc hello.c
#+END_SRC

This will create a file called ~a.out~m which is your binary. To run it, write
#+BEGIN_SRC sh
./a.out
#+END_SRC

In the code above, ~gcc~ is the GNU C compiler. The compiler transforms the code
in your text file to a binary executable file that the computer understands
(machine code). The compiler is a program that makes programs.

But, ~a.out~ is a really bad name, to choose a name for our program we can write
instead
#+BEGIN_SRC sh
gcc -o hello hello.c
#+END_SRC
where ~-o hello~ is what is called a /command line argument/, which are optional
configuration parameters we can pass to command line programs.

* getting user input
We can modify our program to obtain some input:
#+BEGIN_SRC C
#include <stdio.h>

int main(void)
{
    string name = get_string("What is your name?\n");
    printf("hello, name\n");
}
#+END_SRC

* Debugging
If we try to run this, we would get some errors, the first one being that string
is not a recognized data type. Lets fix that (this is called *debugging*):
#+BEGIN_SRC C
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    string name = get_string("What is your name?\n");
    printf("hello, name\n");
}
#+END_SRC

Files written after the ~#include~ keyword, are called libraries (more
specifically the header file of that particular library). A library is a
collection of code that we can reuse in our own programs. We are telling the
compiler to include the contents of those files in our program. The ~cs50.h~
file defined the type string and the function ~get_string~, among other
things. The file ~stdio.h~ is part of the C Standard Library, and includes the
definition of the ~printf~ function.

To compile it, now we need to specifically tell the compiler to use the ~cs50~
library:
#+BEGIN_SRC sh
gcc hello.c -lcs50 -o hello
#+END_SRC

And it works, but it still doesn't print the name, lets try to make the compiler
a little more helpful and make it print all warnings:
#+BEGIN_SRC sh
gcc hello.c -Wall -lcs50 -o hello
#+END_SRC

Now we have an Warning referring to an unused variable, lets fix that using the
string place holder ~%s~ in the ~printf~ function
#+BEGIN_SRC C
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    string name = get_string("What is your name?\n");
    printf("hello, %s\n", name);
}
#+END_SRC

* int.c
Make a file ~int.c~:
#+BEGIN_SRC C
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    int i = get_int("Integer: ");
    printf("hello, %i\n", i);
}
#+END_SRC

* float.c
#+BEGIN_SRC C
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    float f = get_float("Float: ");
    printf("hello, %f\n", f);
}
#+END_SRC

* ints.c
#+BEGIN_SRC C
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Prompt user for x
    int x = get_int("x: ");

    // Prompt user for y
    int y = get_int("y: ");

    // Perform arithmetic
    printf("x + y = %i\n", x + y);
    printf("x - y = %i\n", x - y);
    printf("x * y = %i\n", x * y);
    printf("x / y = %i\n", x / y);
    printf("x mod y = %i\n", x % y);
}
#+END_SRC

* floats.c
#+BEGIN_SRC C
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Prompt user for x
    float x = get_float("x: ");

    // Prompt user for y
    float y = get_float("y: ");

    // Perform division
    printf("x / y = %.50f\n", x / y);
}
#+END_SRC

What's wrong here if we input x=2, y=10? We run into rounding errors. Rounding
errors come from the fact that memory is not infinite, with finite memory we
cannot represent all real number, just a subset of them, so some numbers are not
available to the computer, as is the case of 2/10. What ends up happening is
that we are using the closest available number, so to speak. But this can lead
to errors if we perform a large number of operations.

And these imprecisions can be problematic in finance, rockets, or scientific
applications. But we can get around this problem, by specifying the number of
decimal places we will be precise to, and allocate the right number of bits to
represent that many decimal places.

* doubles.c
#+BEGIN_SRC C
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Prompt user for x
    double x = get_double("x: ");

    // Prompt user for y
    double y = get_double("y: ");

    // Perform division
    printf("x / y = %.50f\n", x / y);
}
#+END_SRC

A float in C, on most computers, uses 4 bytes, or 32 bits. Another type, called
a double, uses twice as many bits, or 8 bytes.

* parity.c
#+BEGIN_SRC C
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Prompt user for integer
    int n = get_int("n: ");

    // Check parity of integer
    if (n % 2 == 0)
    {
        printf("even\n");
    }
    else
    {
        printf("odd\n");
    }
}
#+END_SRC

* conditions.c
#+BEGIN_SRC C
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Prompt user for x
    int x = get_int("x: ");

    // Prompt user for y
    int y = get_int("y: ");

    // Compare x and y
    if (x < y)
    {
        printf("x is less than y\n");
    }
    else if (x > y)
    {
        printf("x is greater than y\n");
    }
    else
    {
        printf("x is equal to y\n");
    }
}
#+END_SRC

* answer.c
#+BEGIN_SRC C
#include <cs50.h>
#include <stdio.h>

int main(void)
{
    // Prompt user for answer
    char c = get_char("Answer: ");

    // Check answer
    if (c == 'Y' || c == 'y')
    {
        printf("yes\n");
    }
    else if (c == 'N' || c == 'n')
    {
        printf("no\n");
    }
}
#+END_SRC

** Logical operators in C
- !: NOT
- &&: AND
- ||: OR

* Building functions
Lets print cough 3 times:
#+BEGIN_SRC C
#include <stdio.h>

int main(void)
{
    for (int i = 0; i < 3; i++)
    {
        printf("cough\n");
    }
}
#+END_SRC

Create a function for coughing:
#+BEGIN_SRC C
#include <stdio.h>

void cough(void); // let the compiler know cough exists

int main(void)
{
    for (int i = 0; i < 3; i++)
    {
        cough();
    }
}

// Cough once
void cough(void)
{
    printf("cough\n");
}
#+END_SRC

Abstracting further:
#+BEGIN_SRC C
#include <stdio.h>

void cough(int n);

int main(void)
{
    cough(3);
}

// Cough some number of times
void cough(int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("cough\n");
    }
}
#+END_SRC

* positive.c

#+BEGIN_SRC C
#include <cs50.h>
#include <stdio.h>

int get_positive_int(string prompt);

int main(void)
{
    int i = get_positive_int("Positive integer: ");
    printf("%i\n", i);
}

// Prompt user for positive integer
int get_positive_int(string prompt)
{
    int n; // this variable is local to this fucntion
    do
    {
        n = get_int("%s", prompt);
    }
    while (n < 1);
    return n;
}
#+END_SRC

* Overflow
Again, memory is finite. There exists a maximum integer value in can represent,
going over it causes problems. For example, if I only have room for three
digits, adding 1 to 999 leads to 000 because I have not space to store the
leading 1. For 32 bits int there is max value ~ 4 billion.

#+BEGIN_SRC C
#include <stdio.h>
#include <unistd.h>

int main(void)
{
    // Iteratively double i
    for (int i = 1; ; i *= 2)
    {
        printf("%i\n", i);
        sleep(1);
    }
}
#+END_SRC
