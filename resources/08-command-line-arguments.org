So far, all of your programs have begun pretty much the same way.
#+begin_src C
int main(void)
{
#+end_src

Since we've been collecting user input through in-program prompts, we haven't
needed to modify this declaration of ~main()~.

If we want the user to provide data to our program before the program starts
running, we need a new form.

To collect so called *command-line arguments* from the user, declare main as:
#+begin_src C
int main(int argc, string argv[])
{
#+end_src
These two special arguments enable you to know what data the user provided at
the command line and how much data they provided.

- ~argc~ (argument count): This integer-type variable will store the *number* of
  command-line arguments the user typed when the program was executed.
| command           | argc |
| ./greedy          |    1 |
| ./greedy 1024 UPY |    3 |

- ~argv~ (argument vector): This array of strings stores, one string per
  element, the actual text the user typed at the command-line when the program
  was executed. The first element of ~argv~ is always found at ~argv[0]~. The
  last element of ~argv~ is always found at ~argv[argc - 1]~. Do you see why?

Let's assume the user executes the greedy program as follows
#+begin_src sh
./greedy 1024 cs50
#+end_src

| argv indices | argv contents |
| argv[0]      | "./greedy"    |
| argv[1]      | "1024"        |
| argv[2]      | "cs50"        |
