Pointers provide an alternative way to pass data between functions.Recall that
up to this point, we have passes all data *by value*, with one exception. When
we pass data by value, we only pass a copy of that data.

If we use pointers instead, we have the power to pass the actual variable
itself. That means that a change that is made in one function _can_ impact what
happens in a different function. Previously, this wasn't possible!

Before we dive into what pointers are and how to work with them, it's worth
going back to basis and have a look at our computer's memory.

Every file on your computer lives on your disk drive, be it a hard disk (HDD) or
a solid state drive (SSD). Disk drives are just storage space; we can't directly
work there. Manipulation and use of data can only take place in RAM, so we have
to move data there. Memory is basically a huge array of 8-bit wide bytes (512
MB, 1 GB, 2 GB, 4 GB...).

| Data type | Size (in bytes) |
|-----------+-----------------|
| int       |               4 |
| char      |               1 |
| float     |               4 |
| double    |               8 |
| long long |               8 |

Recall from out discussion of arrays that they are not only useful for storage
of information but also for so-called *random access*. We can access individual
elements of the array by indicating which index location we want. Similarly,
each location in memory has an *address*.

[[file:figs/memory.png]]

There's only one critical thing to remember as we start working with pointers:
*POINTERS ARE JUST ADDRESSES*.

[[file:figs/pointer.png]]

A *pointer*, then, is as data item whose /value/ is a memory address and whose
/type/ describes the data located at that memory address. As such, pointers
allow data structures and/or variables to be shared among functions. Pointers
make a computer environment more like the real world.

The simplest pointer available to us in C is the NULL pointer. As you might
expect, this pointer points to nothing (a fact which can actually come in
handy!). When you create a pointer and you don't set its value immediately, you
should *always* set the value of the pointer to NULL. You can check whether a
pointer is NULL using the equality operator (~==~).

Another easy way to create a pointer is to simply *extract* the address of an
already existing variable. We can do this with the address operator (~&~). If
~x~ is an ~int~ types variable, then ~&x~ is a pointer-to-int whose value is the
address of ~x~. If ~arr~ is an array of doubles, then ~&arr[i]~ is a
pointer-to-double whose value is the address of the i^{th} element of ~arr~. An
array's name, then, is actually just a pointer to its first element -- you've
been working with pointers all along!

The main purpose of a pointer is to allow us to modify or inspect the location
to which it points. We do this by *dereferencing* the pointer. If we have a
pointer-to-char called ~pc~, then ~*pc~ is the data that lives at the memory
address stored inside the variable ~pc~.

Used in this context, ~*~ is known as the *dereference operator*. It "goes to
the reference" and accesses the data at that memory location, allowing you yo
manipulate it at will. This is just like visiting your neighbor. Having their
address isn't enough. You need to _go to_ the address and only then can you
interact with them.

If you try to dereference a pointer whose value is NULL you'll get a
*segmentation fault*. Surprisingly, this is actually a good behavior! It defends
against accidental dangerous manipulation of unknown pointers. That's why we
recommend you set your pointers to NULL immediately if you aren't setting them
to a known, desired value.

#+begin_src C
int* p;
#+end_src

In the previous code, the value of ~p~ is an address. We can dereference ~p~
with the ~*~ operator. If we do that, what we'll find at that location is an
~int~.

One more annoying thing with those *s. They're and important part of both the
type name *and* the variable name. Best illustrated with an example.
#+begin_src C
int* px, py, pz;
#+end_src
The last code is wrong if the intention was to create three pointer, the correct
way of doing this is
#+begin_src C
int *pa, *pb, *pc;
#+end_src

Since every pointer is just an address, the size of a pointer is always of 4 (32
bit systems) or 8 (64 bit systems) independently of their type.
